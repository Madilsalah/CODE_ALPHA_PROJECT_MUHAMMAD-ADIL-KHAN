TASK 1ST 
Basic Network Sniffer :
Build a network sniffer in Python that captures and analyzes network traffic. This project will help you understand how data flows on a network and how network packets are structured.
SOLUTION
Creating a network sniffer in Python is an excellent way to understand network protocols and packet structure. For this task, we’ll use the scapy library, which provides easy tools to capture and analyze packets.
Install Required Libraries:
 Install the scapy library if you haven’t already
pip install scapy
PYTHON CODE:
from scapy.all import sniff
from scapy.layers.inet import IP, TCP, UDP

# Packet analysis function
def analyze_packet(packet):
    if IP in packet:
        ip_src = packet[IP].src
        ip_dst = packet[IP].dst
        protocol = packet[IP].proto
        
        print(f"\n--- Packet Info ---")
        print(f"Source IP: {ip_src}")
        print(f"Destination IP: {ip_dst}")
        
        # Check if the packet is TCP or UDP
        if protocol == 6:  # TCP protocol
            if TCP in packet:
                sport = packet[TCP].sport
                dport = packet[TCP].dport
                print("Protocol: TCP")
                print(f"Source Port: {sport}")
                print(f"Destination Port: {dport}")
        elif protocol == 17:  # UDP protocol
            if UDP in packet:
                sport = packet[UDP].sport
                dport = packet[UDP].dport
                print("Protocol: UDP")
                print(f"Source Port: {sport}")
                print(f"Destination Port: {dport}")
        else:
            print("Protocol: Other")

        # Print packet summary
        print(f"Raw Data: {bytes(packet[IP].payload)}")

# Start sniffing
print("Starting network sniffer...")
sniff(prn=analyze_packet, filter="ip", store=0)
OUTPUT RESULTS:
--- Packet Info ---
Source IP: 192.168.1.10
Destination IP: 192.168.1.20
Protocol: TCP
Source Port: 443
Destination Port: 54823
Raw Data: b'...'

TASK 2nd 
Phishing Awareness Training 
Create a presentation or online training module about phishing attacks. Educate others about recognizing and avoiding phishing emails, websites, and social engineering tactics. 
SOLUTION
Title: Phishing Awareness Training: Recognize and Protect Yourself
________________________________________
Introduction to Phishing
•	Definition: Briefly define phishing, emphasizing how it’s a form of cyberattack that tricks people into revealing sensitive information.
•	Goals of Phishing: To steal sensitive information like passwords, financial details, or to infect systems with malware.
Common Phishing Methods
•	Email Phishing: Most common form, involves fake emails that look legitimate.
•	Spear Phishing: Targeted attacks tailored to specific individuals or companies.
•	Whaling: Focused attacks aimed at senior executives.
•	Smishing and Vishing: Phishing through SMS (smishing) or voice calls (vishing).
Visual: Show screenshots of a few fake phishing emails or messages.
Anatomy of a Phishing Email
•	Red Flags:
o	Generic greetings (e.g., "Dear Customer").
o	Urgent language (e.g., “Your account will be locked!”).
o	Suspicious links or attachments.
o	Unusual sender addresses.
•	Examples: Illustrate a sample phishing email with highlighted areas that indicate phishing attempts.
Recognizing Phishing Websites
•	URL Check: Look for misspelled URLs or unusual domain names.
•	SSL/TLS Certificates: Ensure there’s a padlock symbol and “https” in the address bar.
•	Pop-up Requests: Be cautious of pop-ups asking for personal information.
Visual: Display examples of legitimate vs. phishing websites side-by-side.
Social Engineering Tactics
•	Impersonation: Attackers often pretend to be someone you know.
•	Pretexting: Creating a fabricated scenario to gain information.
•	Baiting and Quid Pro Quo: Offering something tempting in exchange for sensitive info.
Visual: Show an example where an attacker pretends to be an IT technician requesting a password.
 Best Practices to Avoid Phishing Attacks
•	Verify the Sender: Double-check emails, links, and attachments before clicking.
•	Do Not Share Sensitive Information: Legitimate companies rarely request sensitive information via email or message.
•	Use Multi-Factor Authentication (MFA): Adds an extra layer of security.
•	Educate Yourself and Others: Keep learning about the latest phishing techniques.
Reporting Phishing
•	What to Do: If you suspect phishing, don’t respond, click, or download attachments.
•	How to Report: Provide contacts (e.g., company’s IT team, anti-phishing organizations) and reporting methods.
Visual: List official channels for reporting phishing incidents.


TASK 3RD 
Secure Coding Review
 Choose a programming language and application. Review the code for security vulnerabilities and provide recommendations for secure coding practices. Use tools like static code analyzers or manual code review.
SOLUTION
To conduct a secure coding review, let's choose a programming language and application to review. I'll outline steps, identify common vulnerabilities, and suggest secure coding practices.
For this example, let’s assume we're reviewing a Python web application that interacts with a database and accepts user inputs. We’ll look for potential vulnerabilities and provide recommendations for secure coding practices.
Step 1: Set Up Static Code Analysis Tools
•	Tools to Use: Install a static code analysis tool such as Bandit (specifically for Python), which scans for common security issues.
CODE:
                    pip install bandit
                        bandit -r /path/to/your/project
Step 2: Example Python Application with Security Practices
Here is a secure Python Flask application with integrated security practices. This code demonstrates improvements against common vulnerabilities.
Python code:
import os
import re
from flask import Flask, request, escape, make_response, jsonify
import psycopg2

# Flask app setup
app = Flask(__name__)
app.config["DEBUG"] = False  # Disable debugging in production

# Database connection setup (using environment variable for secure credentials)
DATABASE_URL = os.getenv("DATABASE_URL")
conn = psycopg2.connect(DATABASE_URL)

# Allowed file extensions for secure file upload
ALLOWED_EXTENSIONS = {"jpg", "jpeg", "png", "gif"}

def allowed_file(filename):
    """Check if a file has an allowed extension."""
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

def generate_csrf_token():
    """Generate a CSRF token."""
    return os.urandom(16).hex()

# Secure route to retrieve user data
@app.route("/get_user")
def get_user():
    user_id = request.args.get("id")
    
    # SQL Injection Prevention: Use parameterized queries
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE id = %s", (user_id,))
    user_data = cursor.fetchone()
    cursor.close()

    if user_data:
        return jsonify({"User Data": user_data})
    else:
        return "User not found", 404

# CSRF-protected form submission
@app.route("/submit_form", methods=["POST"])
def submit_form():
    # CSRF Token Validation (simplified)
    csrf_token = request.form.get("csrf_token")
    if csrf_token != request.cookies.get("csrf_token"):
        return "Invalid CSRF token", 403

    user_input = request.form.get("user_input")

    # XSS Prevention: Escape user inputs before displaying
    safe_user_input = escape(user_input)
    return f"<div>{safe_user_input}</div>"

# Secure file upload route
@app.route("/upload_file", methods=["POST"])
def upload_file():
    file = request.files.get("file")
    
    # Secure File Upload: Validate file type
    if file and allowed_file(file.filename):
        filename = escape(file.filename)  # Escape the filename to prevent XSS
        file.save(f"/path/to/upload/{filename}")
        return "File uploaded successfully!", 200
    else:
        return "Invalid file type!", 400

# Input validation example route
@app.route("/validate_input", methods=["POST"])
def validate_input():
    data = request.form.get("data")
    
    # Input Validation: Only allow alphanumeric characters
    if not re.match("^[a-zA-Z0-9]+$", data):
        return "Invalid data format", 400

    # Process data securely
    return "Data processed successfully!"

# API key handling
API_KEY = os.getenv("API_KEY")  # Use environment variable for sensitive information

# Example endpoint using the API key
@app.route("/get_api_data")
def get_api_data():
    # Ensure API key is present
    if not API_KEY:
        return "API Key is not set!", 500

    # Fetch or process data securely using the API key
    return jsonify({"message": "API data retrieved successfully"}), 200

if __name__ == "__main__":
    app.run()
Step 3: Secure Coding Recommendations
Based on this code, here are secure coding practices applied with explanations:
1.	SQL Injection Prevention:
o	Solution: Use parameterized queries to prevent SQL injection. In the get_user() function, user input (user_id) is used safely in the query with %s syntax.
2.	Cross-Site Scripting (XSS) Prevention:
o	Solution: Use the escape() function in submit_form() to sanitize user-generated content before displaying it, preventing malicious scripts from running.
3.	Cross-Site Request Forgery (CSRF) Protection:
o	Solution: Include a CSRF token in forms and verify it upon submission. In submit_form(), the CSRF token is checked to prevent unauthorized form submissions.
4.	Hardcoded Secrets and Sensitive Data:
o	Solution: Store sensitive data such as the database URL and API key in environment variables (DATABASE_URL and API_KEY) instead of hardcoding them.
5.	Insecure File Upload Prevention:
o	Solution: Validate file extensions to allow only certain file types. allowed_file() ensures that only safe extensions (e.g., images) are uploaded.
6.	Input Validation:
o	Solution: Check and restrict user input to a safe format using regular expressions. For instance, validate_input() allows only alphanumeric characters.
7.	Error Handling and Information Disclosure:
o	Solution: Disable Flask’s debug mode (app.config["DEBUG"] = False) in production to avoid exposing sensitive application information.
8.	Dependency Management:
o	Recommendation: Use a dependency checker like pip-audit to detect vulnerable packages. Regularly update dependencies to avoid known vulnerabilities.
Python code:
pip install pip-audit
pip-audit
TASK 4th 
Network Intrusion Detection System
 Develop a network-based intrusion detection system using tools like Snort or Suricata. Set up rules and alerts to identify and respond to suspicious network activity. You can even visualize the detected attacks.
SOLUTION
Network Intrusion Detection System
Creating a practical network intrusion detection system (NIDS) using Snort or Suricata involves setting up the IDS, configuring detection rules, and implementing alerting and visualization mechanisms. Here’s a step-by-step practical guide to setting up and using Snort or Suricata as an IDS:
Step 1: Install Snort or Suricata
- Environment: Use a Linux environment (e.g., Ubuntu 20.04 or later), which is ideal for running network analysis tools.
- Installing Dependencies:
  - Update your system: sudo apt update && sudo apt upgrade -y
  - Install dependencies: sudo apt install -y build-essential libpcap-dev libpcre3-dev libdumbnet-dev
- Installing Snort (alternative commands for Suricata follow in brackets if different):
  - Download Snort: sudo apt install snort (For Suricata: sudo apt install suricata).
  - Verify installation: snort -V (or suricata -V).
Step 2: Configure Network Interface
To monitor all traffic, set the interface to promiscuous mode:
sudo ifconfig [interface] promisc
Replace [interface] with your network interface (e.g., eth0 or wlan0). 
Step 3: Write and Test Detection Rules
Intrusion Detection Systems operate using detection rules. Below are some examples of Snort rules to get started:
Example Rules:
1. Detect a Ping (ICMP) Scan:
   alert icmp any any -> any any (msg:"ICMP Ping Detected"; sid:1000001; rev:1;)
2. Detect SSH Login Attempt from a Specific IP:
   alert tcp 192.168.1.1 any -> any 22 (msg:"SSH login attempt"; sid:1000002; rev:1;)
3. Detect HTTP Traffic on a Non-Standard Port:
   alert tcp any any -> any !80 (msg:"HTTP on Non-Standard Port"; sid:1000003; rev:1;)
Configuring Rules in Snort/Suricata:
- Snort: Place your rules in /etc/snort/rules/local.rules.
- Suricata: Place rules in /etc/suricata/rules/local.rules.
After adding rules, update the configuration to ensure they load. For Snort, you can include include $RULE_PATH/local.rules in the /etc/snort/snort.conf file.
Step 4: Start the IDS
Run Snort or Suricata in monitoring mode to capture and analyze network traffic.
Snort Command:
sudo snort -c /etc/snort/snort.conf -i [interface]
Suricata Command:
sudo suricata -c /etc/suricata/suricata.yaml -i [interface]
Replace [interface] with your network interface.
Step 5: Configure Alerts and Logging
Both Snort and Suricata support alerting mechanisms. By default, they log alerts to files in /var/log/snort/ or /var/log/suricata/. Here’s how to configure logging:
- Snort:
  - In snort.conf, set the output alert_fast or output alert_full options.
  - To customize log locations, specify paths with output log_tcpdump.
- Suricata:
  - In suricata.yaml, configure default-log-dir to change the log path.
  - Set alert-log to control alert outputs.
Step 6: Automate Responses
Create scripts to respond automatically to certain alerts:
Example Script to Block IP with iptables:
  sudo iptables -A INPUT -s [IP_ADDRESS] -j DROP
Replace [IP_ADDRESS] with the IP you want to block based on alerts.
Step 7: Visualize Detected Attacks
To make sense of the log data, use visualization tools like Kibana with Elasticsearch for powerful analytics and visualizations.
1. Install Elasticsearch and Kibana:
   sudo apt install elasticsearch kibana
2. Configure Logstash to parse Snort/Suricata logs:
   Create a configuration file /etc/logstash/conf.d/snort.conf.
3. Run Logstash to start sending Snort logs to Elasticsearch:
   sudo systemctl start logstash
4. Create Kibana Dashboard:
   Open Kibana (typically at http://localhost:5601), connect to the snort-alerts-* index, and create visualizations or dashboards for analyzing intrusion patterns.
Step 8: Testing and Fine-Tuning
Generate Test Traffic: Use tools like Nmap and Metasploit to simulate attacks.
Review Alerts: Check if Snort or Suricata correctly logs alerts for simulated attacks.
Adjust Rules: Refine rule sensitivity and remove false positives.
This setup should give you a working NIDS capable of detecting and logging intrusions with visual analysis. Let me know if you need assistance with any specific part of the implementation!

Task: Endpoint Detection and Response (EDR) System Setup
Objective: Develop and configure an Endpoint Detection and Response (EDR) system to monitor endpoint devices for potential threats, malicious activity, and unauthorized changes. Use tools like OSSEC or Wazuh to configure monitoring, alerts, and incident response actions.
________________________________________
Step 1: Install OSSEC or Wazuh
1.	Environment: Use a Linux machine (Ubuntu 20.04 or later is recommended) to set up a centralized EDR server.
2.	Install Dependencies:
sudo apt update && sudo apt upgrade -y
sudo apt install curl apt-transport-https -y
3.	Install OSSEC/Wazuh:
o	For OSSEC:
wget https://github.com/ossec/ossec-hids/archive/refs/tags/3.6.0.tar.gz
tar -xzf 3.6.0.tar.gz
cd ossec-hids-3.6.0
sudo ./install.sh
o	For Wazuh (a more advanced OSSEC fork with extra features):
curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | sudo apt-key add -
echo "deb https://packages.wazuh.com/4.x/apt stable main" | sudo tee /etc/apt/sources.list.d/wazuh.list
sudo apt update
sudo apt install wazuh-manager
Step 2: Configure Endpoint Agents
1.	Install Agents on each endpoint device (e.g., servers, workstations) that you want to monitor.
o	For Wazuh, download the Wazuh agent installer and install it on each endpoint:
sudo apt install wazuh-agent
2.	Configure Agent to connect with the server:
o	Update the agent’s configuration file to point to the EDR server's IP address.
o	On Linux, edit /var/ossec/etc/ossec.conf (for OSSEC) or /etc/wazuh/wazuh-agent.conf (for Wazuh) and add the server's IP.
Step 3: Set Up Monitoring Rules
Create monitoring rules to track specific events, such as unauthorized file changes, unexpected process starts, or network connections. Here are some example rules:
1.	Detect Unauthorized File Changes:
<rule id="1001" level="7">
  <decoded_as>syscheck</decoded_as>
  <description>Unauthorized file change detected</description>
  <group>syscheck,</group>
  <rule_exceptions>
    <name>whitelist</name>
    <description>Authorized applications</description>
    <exception path="/bin/authorized"/>
  </rule_exceptions>
</rule>
2.	Detect Process Launches:
<rule id="1002" level="10">
  <decoded_as>process</decoded_as>
  <description>Unauthorized process start detected</description>
  <group>process</group>
  <list>process-blacklist</list>
</rule>
Step 4: Configure Alerts and Logging
Both OSSEC and Wazuh have alerting options to trigger notifications on specific events.
•	Alerts Configuration:
o	For email alerts, configure the SMTP server in the configuration file.
o	Set alert levels to trigger notifications based on threat levels.
•	Log Management:
o	Logs are stored in /var/ossec/logs/alerts/alerts.log.
o	For Wazuh, configure integration with Elasticsearch to store and analyze logs.
Step 5: Visualize Threats with Kibana
1.	Install Elasticsearch and Kibana for real-time data visualization:
sudo apt install elasticsearch kibana
2.	Connect Wazuh to Elasticsearch:
o	Configure the Wazuh Manager to send logs to Elasticsearch.
o	Access Kibana at http://localhost:5601, create dashboards for tracking and analyzing threat activity.
Step 6: Automate Responses
1.	Create Incident Response Scripts to take action when alerts are triggered:
o	Example: Isolate the endpoint or block specific IPs based on alert details.
sudo iptables -A INPUT -s [IP_ADDRESS] -j DROP
2.	Test Automated Response: Use simulated attacks to test if the EDR system logs alerts and performs automated actions correctly.
Step 7: Testing and Fine-Tuning
1.	Simulate Threats: Use tools like Metasploit to simulate endpoint threats.
2.	Adjust Rules: Fine-tune rules and alerts to minimize false positives.
